[
  {
    "project_name": "Archive",
    "project_description": "웹 블로그 개발 프로젝트",
    "project_duration": "2024.07 - 현재",
    "project_composition": "백엔드 및 서버 개발자 1명, 프론트엔드 개발자 1명",
    "project_url": "https://blog.minjae-dev.com",
    "github_url": "https://github.com/Dong-Ian/blog-typescript",
    "skills": ["HTML", "CSS", "TypeScript", "React", "React Query"],
    "main_tasks": [
      {
        "t": "프론트엔드 개발",
        "d": "React를 활용하여 블로그의 모든 프론트엔드 구현"
      },
      {
        "t": "포스팅 및 글 작성 기능",
        "d": "동적 URL 라우팅을 적용하여 포스팅 페이지 및 글 작성 기능을 구현"
      },
      {
        "t": "댓글 기능",
        "d": "Utterances 라이브러리를 사용해 GitHub 인증을 통한 댓글 기능을 구현"
      },
      {
        "t": "JWT 인증 관리",
        "d": "Http-only cookie와 JWT를 사용하여 인증 관리 및 보호된 페이지 접근 제어"
      },
      {
        "t": "React Query",
        "d": "API 요청 처리 및 캐시 저장을 통해 서버 부하 최소화"
      },
      {
        "t": "SEO 최적화",
        "d": "react-helmet을 활용하여 각 페이지 제목을 동적으로 설정하고, SEO 최적화를 통해 구글 검색에 최적화"
      },
      {
        "t": "반응형 디자인",
        "d": "화면 크기에 맞는 반응형 레이아웃 구현"
      }
    ],
    "project_image": [
      "archive_Main.png?alt=media&token=b6aa5805-d966-4e82-a8bc-51a463a225f1",
      "archive_Post.png?alt=media&token=1aaaf38d-2ccc-4763-bf05-d4ef6baf2325",
      "archive_Postlist.png?alt=media&token=586d5ee3-672c-4333-85a4-2e00ae4b724e",
      "archive_Comment.png?alt=media&token=24d7af62-f992-4a2a-a0ec-074ab94911c5",
      "archive_Editpost.png?alt=media&token=dbfea25c-ff84-41f4-bb8d-c0af8f22f479"
    ],
    "project_contribution": "프론트엔드 개발 전담",

    "project_problem": [
      "계속된 account 함수 호출로 서버 부하가 증가하였고, 요청 시간이 평균 150ms에서 200ms로 소요되었습니다. 이를 해결하기 위해 전역 상태 관리 방법을 고민하게 되었습니다.",
      "이에 Recoil과 Redux를 고려했으나, 유저 정보 변경을 실시간으로 감지하고 처리하는 것이 어려웠고, 함수 호출 위치도 명확히 할 수 없어 해결이 어려웠습니다."
    ],
    "project_solution": [
      "React Query의 캐싱 기능을 활용하여 중복 요청을 줄이고, 데이터 재사용을 통해 서버 부하를 80% 감소시켰습니다. 이를 통해 요청 응답 시간도 평균 50ms로 단축되었습니다.",
      "유저 정보가 변경될 때나 캐시가 만료되었을 때 데이터를 갱신하여 최신 상태를 유지하였습니다",
      "또한, 동일한 요청이 여러 번 발생할 가능성이 있는 부분을 React Query로 처리하여, 로딩 중에는 로딩 컴포넌트를 표시하도록 구현했습니다."
    ]
  },
  {
    "project_name": "Petfinity",
    "project_description": "반려동물 AI 건강 진단 애플리케이션",
    "project_duration": "2024.03 - 2024.06 (4개월)",
    "project_composition": "백엔드 개발자 2명, 프론트엔드 개발자 1명, AI 개발자 1명",
    "github_url": "https://github.com/Capstone-Petfinity/front-ian",
    "skills": ["HTML", "CSS", "JavaScript", "ReactNative", "Figma"],
    "main_tasks": [
      {
        "t": "디바이스 사진 전송 기능",
        "d": "디바이스 카메라 및 갤러리를 통한 사진 및 정보 전송 기능 구현"
      },
      {
        "t": "UI/UX 디자인",
        "d": "Figma를 활용한 UI/UX 디자인 및 프론트엔드 개발 전담"
      },
      {
        "t": "서버 관리 및 도메인 연결",
        "d": "백엔드 서버와 AI 서버 관리 및 도메인 연결 담당"
      },
      {
        "t": "서버 통신",
        "d": "REST API를 이용한 서버와의 데이터 통신 및 에러 처리"
      },
      {
        "t": "백엔드 로직 설계",
        "d": "UUID를 이용한 백엔드 로직 설계"
      }
    ],
    "project_image": [
      "petfinity_Login.png?alt=media&token=e878e103-5160-433d-952a-c871b71ff99b",
      "petfinity_Logout.png?alt=media&token=f86e09a9-8ad2-46aa-b2a0-9380770e0f38",
      "petfinity_SingUp.png?alt=media&token=7db72aaa-a0cf-4790-bbbb-d4923efd7eb0",
      "petfinity_Diagnosis.png?alt=media&token=733c8122-1513-4635-9ab8-edd6fa82f1a4",
      "petfinity_Reservation1.png?alt=media&token=31a89d2d-4985-4ec7-8e3b-9267de8283c7",
      "petfinity_Reservation2.png?alt=media&token=be484534-702f-4f3e-b0f7-46101cb9ab2c",
      "petfinity_PetList.png?alt=media&token=2f3928f9-4003-42ab-bf6f-4ae9764bb582",
      "petfinity_CheckReservation.png?alt=media&token=ceaf97eb-fc5b-4583-9d73-2958104a3dee"
    ],
    "project_contribution": "프론트엔드 개발 전담, 서버 관리, 백엔드 로직 설계",
    "project_problem": [
      "React Native를 처음 사용하여 개발에 어려움이 있었습니다."
    ],
    "project_solution": [
      "Figma를 통해 필요한 화면을 먼저 설계하고, 이를 바탕으로 컴포넌트를 나눠서 단계적으로 개발했습니다.",
      "반려동물 보호자와 수의사 두 개의 버전이 필요했기에, 처음부터 디렉토리를 나눠 개발을 진행하였습니다."
    ]
  },
  {
    "project_name": "Antiheimer",
    "project_description": "AI 치매 진단 애플리케이션",
    "project_duration": "2024.08 - 2024.10 (3개월)",
    "project_composition": "백엔드 개발자 2명, 프론트엔드 개발자 1명, AI 개발자 1명",
    "github_url": "https://github.com/AntiHeimer/front-RN",
    "skills": ["HTML", "CSS", "JavaScript", "ReactNative", "Figma"],
    "main_tasks": [
      {
        "t": "Apple HealthKit 연동",
        "d": "Apple HealthKit 데이터를 가져와 그래프로 시각화하는 기능 구현"
      },
      {
        "t": "위치 추적 기능",
        "d": "현재 위치를 디바이스에서 불러와 지도에 표시하는 기능 개발"
      },
      {
        "t": "UI/UX 디자인",
        "d": "Figma를 활용한 UI/UX 디자인 및 프론트엔드 개발 전담"
      },
      {
        "t": "JWT 인증 관리",
        "d": "JWT를 활용한 사용자 인증 관리 및 보안 강화"
      },
      {
        "t": "서버 통신",
        "d": "REST API를 이용한 서버와의 데이터 통신 및 에러 처리"
      }
    ],
    "project_image": [
      "antiheimer_Main.png?alt=media&token=eed76c57-0e6f-4839-ab0f-bfaac25c6d40",
      "antiheimer_Login.png?alt=media&token=d144356f-e1a7-4f63-8171-171933a754fa",
      "antiheimer_SignUp.png?alt=media&token=91162bec-d31d-48e9-9383-294ce050009e",
      "antiheimer_Location.png?alt=media&token=1d29e924-a9ff-4800-a0bc-c31591d8e143",
      "antiheimer_Notification.png?alt=media&token=b402d57a-45c8-4922-bdd4-8d79ad10128a"
    ],
    "project_contribution": "프론트엔드 개발 전담",
    "project_problem": [
      "Alert, Button, AsyncStorage, 암호화 함수 등 자주 사용되는 컴포넌트와 함수를 모듈화하지 않아 코드가 난잡해지고, 가독성이 떨어지는 문제가 발생하였습니다."
    ],
    "project_solution": [
      "Utils 폴더를 생성하여 자주 사용하는 컴포넌트와 함수들을 전역적으로 모듈화했습니다.",
      "‘Storage’ 모듈을 설계하여 AsyncStorage의 데이터를 저장, 조회, 삭제 및 전체 삭제 작업을 통합적으로 관리되게 하였습니다.",
      "모듈을 설계할 때 JSON 변환과 오류 처리를 내장하여 코드의 일관성을 유지하고 재사용성을 높였습니다."
    ]
  }
]
